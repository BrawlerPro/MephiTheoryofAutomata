# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : parser.sm

import statemap


class ParserState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def next(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class StateMap_Default(ParserState):

    def next(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(StateMap.unexpected)
        fsm.getState().Entry(fsm)


class StateMap_unexpected(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.unacceptable()
        finally:
            fsm.setState(StateMap.start)
            fsm.getState().Entry(fsm)


class StateMap_start(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.match("create")  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume(5)
            finally:
                fsm.setState(StateMap.space_after_create)
                fsm.getState().Entry(fsm)
        else:
            StateMap_Default.next(self, fsm)
        
class StateMap_end(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.is_valid()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.acceptable()
            finally:
                fsm.setState(StateMap.start)
                fsm.getState().Entry(fsm)
        else:
            StateMap_Default.next(self, fsm)
        
class StateMap_space_after_create(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek() == ' '  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume_whitespace()
                ctxt.token_start()
            finally:
                fsm.setState(StateMap.relation_name_state)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(StateMap.unexpected)
            fsm.getState().Entry(fsm)


class StateMap_relation_name_state(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isalnum() or ctxt.peek() == '_' or ctxt.peek() == '.'  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(StateMap.relation_name_state)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek() == " "  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume_whitespace()
            finally:
                fsm.setState(StateMap.choice_after_relation)
                fsm.getState().Entry(fsm)
        elif  ctxt.match('(')  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.set_relation()
                ctxt.consume(1)
            finally:
                fsm.setState(StateMap.open_paren_state)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(StateMap.unexpected)
            fsm.getState().Entry(fsm)


class StateMap_choice_after_relation(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.match('(')  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.set_relation()
                ctxt.consume(1)
                ctxt.consume_whitespace()
            finally:
                fsm.setState(StateMap.open_paren_state)
                fsm.getState().Entry(fsm)
        elif  ctxt.match("as")  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.set_relation()
                ctxt.consume(1)
                ctxt.consume_whitespace()
                ctxt.token_start()
            finally:
                fsm.setState(StateMap.relation_name1_state)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(StateMap.unexpected)
            fsm.getState().Entry(fsm)


class StateMap_open_paren_state(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isalnum() or ctxt.peek() == '_' or ctxt.peek() == '.'  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.token_start()
                ctxt.consume()
            finally:
                fsm.setState(StateMap.attr_name_state)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(StateMap.unexpected)
            fsm.getState().Entry(fsm)


class StateMap_attr_name_state(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isalnum() or ctxt.peek() == '_' or ctxt.peek() == '.'  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(StateMap.attr_name_state)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek() == ' '  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume_whitespace()
            finally:
                fsm.setState(StateMap.choice_after_attr)
                fsm.getState().Entry(fsm)
        elif  ctxt.match(',')  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.add_attribute()
                ctxt.consume()
                ctxt.consume_whitespace()
            finally:
                fsm.setState(StateMap.open_paren_state)
                fsm.getState().Entry(fsm)
        elif  ctxt.match(')')  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.add_attribute()
                ctxt.consume()
            finally:
                fsm.setState(StateMap.close_paren_state)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(StateMap.unexpected)
            fsm.getState().Entry(fsm)


class StateMap_choice_after_attr(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.match(',')  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.add_attribute()
                ctxt.consume()
                ctxt.consume_whitespace()
            finally:
                fsm.setState(StateMap.open_paren_state)
                fsm.getState().Entry(fsm)
        elif  ctxt.match(')')  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.add_attribute()
                ctxt.consume()
                ctxt.consume_whitespace()
            finally:
                fsm.setState(StateMap.close_paren_state)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(StateMap.unexpected)
            fsm.getState().Entry(fsm)


class StateMap_close_paren_state(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.register_relation()
        finally:
            fsm.setState(StateMap.end)
            fsm.getState().Entry(fsm)


class StateMap_relation_name1_state(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isalnum() or ctxt.peek() == '_' or ctxt.peek() == '.'  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(StateMap.relation_name1_state)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek() == ' '  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume_whitespace()
            finally:
                fsm.setState(StateMap.choice_after_relation1)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(StateMap.unexpected)
            fsm.getState().Entry(fsm)


class StateMap_choice_after_relation1(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.match('join')  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.set_relation1()
                ctxt.consume(3)
                ctxt.consume_whitespace()
                ctxt.token_start()
            finally:
                fsm.setState(StateMap.relation_name2_state)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(StateMap.unexpected)
            fsm.getState().Entry(fsm)


class StateMap_relation_name2_state(StateMap_Default):

    def next(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.peek().isalnum() or ctxt.peek() == '_' or ctxt.peek() == '.'  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.consume()
            finally:
                fsm.setState(StateMap.relation_name2_state)
                fsm.getState().Entry(fsm)
        elif  ctxt.peek() == '\n'  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.set_relation2()
                ctxt.merge_relations()
            finally:
                fsm.setState(StateMap.end)
                fsm.getState().Entry(fsm)
        else:
            StateMap_Default.next(self, fsm)
        
class StateMap(object):

    unexpected = StateMap_unexpected('StateMap.unexpected', 0)
    start = StateMap_start('StateMap.start', 1)
    end = StateMap_end('StateMap.end', 2)
    space_after_create = StateMap_space_after_create('StateMap.space_after_create', 3)
    relation_name_state = StateMap_relation_name_state('StateMap.relation_name_state', 4)
    choice_after_relation = StateMap_choice_after_relation('StateMap.choice_after_relation', 5)
    open_paren_state = StateMap_open_paren_state('StateMap.open_paren_state', 6)
    attr_name_state = StateMap_attr_name_state('StateMap.attr_name_state', 7)
    choice_after_attr = StateMap_choice_after_attr('StateMap.choice_after_attr', 8)
    close_paren_state = StateMap_close_paren_state('StateMap.close_paren_state', 9)
    relation_name1_state = StateMap_relation_name1_state('StateMap.relation_name1_state', 10)
    choice_after_relation1 = StateMap_choice_after_relation1('StateMap.choice_after_relation1', 11)
    relation_name2_state = StateMap_relation_name2_state('StateMap.relation_name2_state', 12)
    Default = StateMap_Default('StateMap.Default', -1)

class Parser_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, StateMap.start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
